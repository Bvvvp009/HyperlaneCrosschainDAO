{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```solidity\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n *\n * [WARNING]\n * ====\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\n * unusable.\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\n *\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\n * array of EnumerableSet.\n * ====\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position is the index of the value in the `values` array plus 1.\n        // Position 0 is used to mean a value is not in the set.\n        mapping(bytes32 value => uint256) _positions;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._positions[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We cache the value's position to prevent multiple reads from the same storage slot\n        uint256 position = set._positions[value];\n\n        if (position != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 valueIndex = position - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (valueIndex != lastIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the lastValue to the index where the value to delete is\n                set._values[valueIndex] = lastValue;\n                // Update the tracked position of the lastValue (that was just moved)\n                set._positions[lastValue] = position;\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the tracked position for the deleted slot\n            delete set._positions[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._positions[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        bytes32[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/GovernanceCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\n\r\ninterface IInterchainGasPaymaster {\r\n    function payForGas(\r\n        bytes32 _messageId,\r\n        uint32 _destinationDomain,\r\n        uint256 _gasAmount,\r\n        address _refundAddress\r\n    ) external payable;\r\n\r\n      function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount) external view returns (uint256);\r\n}\r\n\r\ninterface IMailbox {\r\n    function dispatch(\r\n        uint32 destinationDomain,\r\n        bytes32 recipientAddress,\r\n        bytes calldata messageBody\r\n    ) external payable returns (bytes32 messageId);\r\n\r\n    function process(bytes calldata _metadata, bytes calldata _message) external;\r\n\r\n    function handle(\r\n        uint32 _origin,\r\n        bytes32 _sender,\r\n        bytes calldata _message\r\n    ) external payable;\r\n\r\n    function quoteDispatch(\r\n        uint32 destinationDomain,\r\n        bytes32 recipientAddress,\r\n        bytes calldata messageBody\r\n    ) external view returns (uint256 fee);\r\n}\r\n\r\ncontract GovernanceCore is Ownable {\r\n    using EnumerableSet for EnumerableSet.UintSet;\r\n\r\n    IERC20 public governanceToken;\r\n    IMailbox public mailbox;\r\n    IInterchainGasPaymaster public igp;\r\n    uint256 public proposalCount;\r\n    uint256 public votingPeriod = 7 days;\r\n    uint256 public quorumPercentage = 10;\r\n    uint32 public  currentChainID;\r\n\r\n\r\n  struct Proposal {\r\n    uint256 id;\r\n    address proposer;\r\n    string description;\r\n    uint256 forVotes;\r\n    uint256 againstVotes;\r\n    uint256 startTime;\r\n    bool executed;\r\n    uint32 executionChain;\r\n    address target;\r\n    bytes callData;\r\n    mapping(uint32 => bool) chainVotesCollected;\r\n    uint32 chainVotesCount;\r\n    mapping(address => bool) hasVoted; // Add this line\r\n  }\r\n    mapping(uint256 => Proposal) public proposals;\r\n    EnumerableSet.UintSet private activeProposals;\r\n    mapping(uint32 => bytes32) public chainToProxyAddress;\r\n    uint32[] public supportedChains;\r\n\r\n    event ProposalCreated(uint256 indexed proposalId, address proposer, string description, uint32 executionChain);\r\n    event VotesCollected(uint256 indexed proposalId, uint32 chainId, uint256 forVotes, uint256 againstVotes);\r\n    event ProposalExecuted(uint256 indexed proposalId);\r\n    event CrossChainProposalCreated(uint256 indexed proposalId, uint32 destinationDomain);\r\n    event SupportedChainAdded(uint32 chainId, bytes32 proxyAddress);\r\n    event Voted(uint256 indexed proposalId, address voter, bool support, uint256 weight);\r\n\r\n    \r\n    constructor(address _governanceToken, address _mailbox, address _igp,uint32 chainId) Ownable(msg.sender) {\r\n        governanceToken = IERC20(_governanceToken);\r\n        mailbox = IMailbox(_mailbox);\r\n        igp = IInterchainGasPaymaster(_igp);\r\n        currentChainID = chainId;\r\n    }\r\n\r\n    function addSupportedChain(uint32 chainId, bytes32 proxyAddress) external onlyOwner {\r\n        require(chainToProxyAddress[chainId] == bytes32(0), \"Chain already supported\");\r\n        chainToProxyAddress[chainId] = proxyAddress;\r\n        supportedChains.push(chainId);\r\n        emit SupportedChainAdded(chainId, proxyAddress);\r\n    }\r\n  \r\n  \r\n  function createProposal(string memory description, uint32 executionChain, address target, bytes memory callData) external payable {\r\n    require(governanceToken.balanceOf(msg.sender) > 0, \"Must hold governance tokens to propose\");\r\n    require(executionChain == currentChainID || chainToProxyAddress[executionChain] != bytes32(0), \"Invalid execution chain\");\r\n\r\n    proposalCount++;\r\n    Proposal storage newProposal = proposals[proposalCount];\r\n    newProposal.id = proposalCount;\r\n    newProposal.proposer = msg.sender;\r\n    newProposal.description = description;\r\n    newProposal.startTime = block.timestamp;\r\n    newProposal.executionChain = executionChain;\r\n    newProposal.target = target;\r\n    newProposal.callData = callData;\r\n    newProposal.chainVotesCount = 0;\r\n    activeProposals.add(proposalCount);\r\n    \r\n    emit ProposalCreated(proposalCount, msg.sender, description, executionChain);\r\n\r\n    uint256 totalFee = 0;\r\n    uint256 dispatchedCount = 0;\r\n    \r\n    for (uint i = 0; i < supportedChains.length; i++) {\r\n        uint32 chainId = supportedChains[i];\r\n        if (chainId != currentChainID) {\r\n            try this._dispatchProposal{value: msg.value - totalFee}(chainId, proposalCount, description, executionChain, target, callData) returns (uint256 fee) {\r\n                totalFee += fee;\r\n                dispatchedCount++;\r\n            } catch Error(string memory reason) {\r\n                emit DispatchFailed(chainId, proposalCount, reason);\r\n            } catch (bytes memory) {\r\n                emit DispatchFailed(chainId, proposalCount, \"Unknown error\");\r\n            }\r\n        }\r\n    }\r\n\r\n    require(dispatchedCount > 0, \"Failed to dispatch to any chain\");\r\n    require(msg.value >= totalFee, \"Insufficient fee provided\");\r\n    \r\n    // Refund excess payment\r\n    if (msg.value > totalFee) {\r\n        payable(msg.sender).transfer(msg.value - totalFee);\r\n    }\r\n  }\r\n\r\nfunction _dispatchProposal(uint32 destinationDomain, uint256 proposalId, string memory description, uint32 executionChain, address target, bytes memory callData) external payable returns (uint256) {\r\n    require(msg.sender == address(this), \"Only the contract can call this function\");\r\n\r\n    bytes memory message = abi.encode(0, proposalId, description, executionChain, target, callData);\r\n    uint256 mailboxFee = mailbox.quoteDispatch(destinationDomain, chainToProxyAddress[destinationDomain], message);\r\n    \r\n    require(msg.value >= mailboxFee, \"Insufficient fee for dispatch\");\r\n\r\n    bytes32 messageId = mailbox.dispatch{value: mailboxFee}(destinationDomain, chainToProxyAddress[destinationDomain], message);\r\n\r\n    // Estimate gas needed for the destination chain\r\n    uint256 gasAmount = 300000; // Adjust this value based on the gas needed on the destination chain\r\n    uint256 igpFee = igp.quoteGasPayment(destinationDomain, gasAmount);\r\n\r\n    require(msg.value >= mailboxFee + igpFee, \"Insufficient fee for IGP\");\r\n\r\n    igp.payForGas{value: igpFee}(messageId, destinationDomain, gasAmount, msg.sender);\r\n\r\n    emit CrossChainProposalCreated(proposalId, destinationDomain);\r\n\r\n    return mailboxFee + igpFee;\r\n}\r\n\r\nevent DispatchFailed(uint32 chainId, uint256 proposalId, string reason);\r\n\r\nfunction vote(uint256 proposalId, bool support) external {\r\n    require(governanceToken.balanceOf(msg.sender) > 0, \"Must hold governance tokens to vote\");\r\n    Proposal storage proposal = proposals[proposalId];\r\n    require(block.timestamp <= proposal.startTime + votingPeriod, \"Voting period has ended\");\r\n    require(!proposal.executed, \"Proposal already executed\");\r\n    require(!proposal.hasVoted[msg.sender], \"Already voted\"); // Add this line\r\n\r\n    uint256 voteWeight = governanceToken.balanceOf(msg.sender);\r\n\r\n    if (support) {\r\n        proposal.forVotes += voteWeight;\r\n    } else {\r\n        proposal.againstVotes += voteWeight;\r\n    }\r\n\r\n    proposal.hasVoted[msg.sender] = true; // Add this line\r\n\r\n    emit Voted(proposalId, msg.sender, support, voteWeight);\r\n    }\r\n    \r\n    function collectVotes(uint256 proposalId) external payable {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(block.timestamp > proposal.startTime + votingPeriod, \"Voting period not ended\");\r\n        require(!proposal.executed, \"Proposal already executed\");\r\n\r\n        uint256 totalFee = 0;\r\n        for (uint i = 0; i < supportedChains.length; i++) {\r\n            uint32 chainId = supportedChains[i];\r\n            if (!proposal.chainVotesCollected[chainId]) {\r\n                totalFee += _requestVotes(chainId, proposalId);\r\n            }\r\n        }\r\n        require(msg.value >= totalFee, \"Insufficient fee provided\");\r\n    }\r\n\r\n    function _requestVotes(uint32 destinationDomain, uint256 proposalId) internal returns (uint256) {\r\n        bytes memory message = abi.encode(1, proposalId);\r\n        uint256 fee = mailbox.quoteDispatch(destinationDomain, chainToProxyAddress[destinationDomain], message);\r\n        mailbox.dispatch{value: fee}(destinationDomain, chainToProxyAddress[destinationDomain], message);\r\n        return fee;\r\n    }\r\n\r\n    function handle(uint32 _origin, bytes32 _sender, bytes calldata _body) external {\r\n        require(msg.sender == address(mailbox), \"Only Mailbox can call this function\");\r\n        require(_sender == chainToProxyAddress[_origin], \"Invalid sender\");\r\n\r\n        (uint256 actionType, ) = abi.decode(_body, (uint256, bytes));\r\n\r\n        if (actionType == 1) {\r\n            _handleVoteCollection(_origin, _body);\r\n        }\r\n    }\r\n\r\n    function _handleVoteCollection(uint32 _origin, bytes calldata _body) internal {\r\n        (,uint256 proposalId, uint256 forVotes, uint256 againstVotes) = abi.decode(_body, (uint256, uint256, uint256, uint256));\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(!proposal.chainVotesCollected[_origin], \"Votes already collected for this chain\");\r\n\r\n        proposal.forVotes += forVotes;\r\n        proposal.againstVotes += againstVotes;\r\n        proposal.chainVotesCollected[_origin] = true;\r\n        proposal.chainVotesCount++;\r\n\r\n        emit VotesCollected(proposalId, _origin, forVotes, againstVotes);\r\n\r\n        if (proposal.chainVotesCount == supportedChains.length) {\r\n            _finalizeProposal(proposalId);\r\n        }\r\n    }\r\n\r\n    function _finalizeProposal(uint256 proposalId) internal {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        uint256 totalVotes = proposal.forVotes + proposal.againstVotes;\r\n        uint256 quorumVotes = (governanceToken.totalSupply() * quorumPercentage) / 100;\r\n        \r\n        if (totalVotes >= quorumVotes && proposal.forVotes > proposal.againstVotes) {\r\n            proposal.executed = true;\r\n            activeProposals.remove(proposalId);\r\n            emit ProposalExecuted(proposalId);\r\n            \r\n            if (proposal.executionChain == 0) {  // Assuming 0 is the home chain\r\n                (bool success, ) = proposal.target.call(proposal.callData);\r\n                require(success, \"Proposal execution failed\");\r\n            } else {\r\n                _dispatchExecution(proposal.executionChain, proposalId, proposal.target, proposal.callData);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _dispatchExecution(uint32 destinationDomain, uint256 proposalId, address target, bytes memory callData) internal {\r\n        bytes memory message = abi.encode(2, proposalId, target, callData);\r\n        uint256 fee = mailbox.quoteDispatch(destinationDomain, chainToProxyAddress[destinationDomain], message);\r\n        mailbox.dispatch{value: fee}(destinationDomain, chainToProxyAddress[destinationDomain], message);\r\n    }\r\n\r\n    function getActiveProposals() external view returns (uint256[] memory) {\r\n        return activeProposals.values();\r\n    }\r\n\r\n    // Function to withdraw any excess ETH\r\n    function withdrawExcessEth() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n}"
    },
    "contracts/GovernanceProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IMailbox {\r\n    function dispatch(\r\n        uint32 _destinationDomain,\r\n        bytes32 _recipientAddress,\r\n        bytes calldata _messageBody\r\n    ) external returns (bytes32);\r\n}\r\n\r\ninterface IGovernanceToken {\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract GovernanceProxy {\r\n    address public owner;\r\n    IMailbox public mailbox;\r\n    IGovernanceToken public governanceToken;\r\n    uint32 public homeDomain;\r\n    bytes32 public homeCoreAddress;\r\n\r\n    struct Proposal {\r\n        uint256 id;\r\n        string description;\r\n        uint256 forVotes;\r\n        uint256 againstVotes;\r\n        uint256 startTime;\r\n        uint256 endTime;\r\n        uint32 executionChain;\r\n        address target;\r\n        bytes callData;\r\n        bool executed;\r\n        mapping(address => bool) hasVoted;\r\n    }\r\n\r\n    mapping(uint256 => Proposal) public proposals;\r\n    uint256[] private activeProposalIds;\r\n\r\n    event ProposalReceived(uint256 proposalId, string description, uint32 executionChain);\r\n    event Voted(uint256 proposalId, address voter, bool support, uint256 weight);\r\n    event VotesCollected(uint256 proposalId, uint256 forVotes, uint256 againstVotes);\r\n    event ProposalExecuted(uint256 proposalId);\r\n\r\n    constructor(address _mailbox, address _governanceToken, uint32 _homeDomain, bytes32 _homeCoreAddress) {\r\n        owner = msg.sender;\r\n        mailbox = IMailbox(_mailbox);\r\n        governanceToken = IGovernanceToken(_governanceToken);\r\n        homeDomain = _homeDomain;\r\n        homeCoreAddress = _homeCoreAddress;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Only owner can call this function\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyMailbox() {\r\n        require(msg.sender == address(mailbox), \"Only Mailbox can call this function\");\r\n        _;\r\n    }\r\n\r\n    function setHomeCoreAddress(bytes32 _homeCoreAddress) external onlyOwner {\r\n        homeCoreAddress = _homeCoreAddress;\r\n    }\r\n\r\n    function handle(uint32 _origin, bytes32 _sender, bytes calldata _body) external onlyMailbox {\r\n        require(_sender == homeCoreAddress, \"Invalid sender\");\r\n\r\n        (uint256 actionType, ) = abi.decode(_body, (uint256, bytes));\r\n\r\n        if (actionType == 0) {\r\n            _handleProposalCreation(_body);\r\n        } else if (actionType == 1) {\r\n            _handleVoteCollection(_body);\r\n        } else if (actionType == 2) {\r\n            _handleProposalExecution(_body);\r\n        } else {\r\n            revert(\"Invalid action type\");\r\n        }\r\n    }\r\n\r\n    function _handleProposalCreation(bytes calldata _body) internal {\r\n        (,uint256 proposalId, string memory description, uint32 executionChain, address target, bytes memory callData) = abi.decode(_body, (uint256, uint256, string, uint32, address, bytes));\r\n        require(proposals[proposalId].id == 0, \"Proposal already exists\");\r\n\r\n        Proposal storage newProposal = proposals[proposalId];\r\n        newProposal.id = proposalId;\r\n        newProposal.description = description;\r\n        newProposal.startTime = block.timestamp;\r\n        newProposal.endTime = block.timestamp + 7 days;\r\n        newProposal.executionChain = executionChain;\r\n        newProposal.target = target;\r\n        newProposal.callData = callData;\r\n        \r\n        activeProposalIds.push(proposalId);\r\n        \r\n        emit ProposalReceived(proposalId, description, executionChain);\r\n    }\r\n\r\n    function _handleVoteCollection(bytes calldata _body) internal {\r\n        (,uint256 proposalId) = abi.decode(_body, (uint256, uint256));\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(proposal.id != 0, \"Proposal does not exist\");\r\n        require(block.timestamp > proposal.endTime, \"Voting period not ended\");\r\n\r\n        // Remove the proposal from active proposals\r\n        for (uint i = 0; i < activeProposalIds.length; i++) {\r\n            if (activeProposalIds[i] == proposalId) {\r\n                activeProposalIds[i] = activeProposalIds[activeProposalIds.length - 1];\r\n                activeProposalIds.pop();\r\n                break;\r\n            }\r\n        }\r\n\r\n        bytes memory message = abi.encode(1, proposalId, proposal.forVotes, proposal.againstVotes);\r\n        mailbox.dispatch(homeDomain, homeCoreAddress, message);\r\n        emit VotesCollected(proposalId, proposal.forVotes, proposal.againstVotes);\r\n    }\r\n\r\n    function _handleProposalExecution(bytes calldata _body) internal {\r\n        (,uint256 proposalId, address target, bytes memory callData) = abi.decode(_body, (uint256, uint256, address, bytes));\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(proposal.id != 0, \"Proposal does not exist\");\r\n        require(!proposal.executed, \"Proposal already executed\");\r\n\r\n        proposal.executed = true;\r\n        (bool success, ) = target.call(callData);\r\n        require(success, \"Proposal execution failed\");\r\n        emit ProposalExecuted(proposalId);\r\n    }\r\n\r\n    function vote(uint256 proposalId, bool support) external {\r\n        Proposal storage proposal = proposals[proposalId];\r\n        require(proposal.id != 0, \"Proposal does not exist\");\r\n        require(!proposal.hasVoted[msg.sender], \"Already voted\");\r\n        require(block.timestamp <= proposal.endTime, \"Voting period ended\");\r\n        \r\n        uint256 weight = governanceToken.balanceOf(msg.sender);\r\n        require(weight > 0, \"No voting power\");\r\n\r\n        if (support) {\r\n            proposal.forVotes += weight;\r\n        } else {\r\n            proposal.againstVotes += weight;\r\n        }\r\n        proposal.hasVoted[msg.sender] = true;\r\n\r\n        emit Voted(proposalId, msg.sender, support, weight);\r\n    }\r\n\r\n    function getActiveProposals() external view returns (uint256[] memory) {\r\n        return activeProposalIds;\r\n    }\r\n}"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}