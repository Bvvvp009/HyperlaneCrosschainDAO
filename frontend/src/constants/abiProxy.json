{
  "address": "0x03D66E8C3b9f3A60dF278AD24AeF0a4836d735AF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governanceToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_mailbox",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_igp",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        }
      ],
      "name": "CrossChainProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "reason",
          "type": "string"
        }
      ],
      "name": "DispatchFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "executionChain",
          "type": "uint32"
        }
      ],
      "name": "ProposalCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "ProposalExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "proxyAddress",
          "type": "bytes32"
        }
      ],
      "name": "SupportedChainAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "voter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "weight",
          "type": "uint256"
        }
      ],
      "name": "Voted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        }
      ],
      "name": "VotesCollected",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "destinationDomain",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "executionChain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "_dispatchProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "chainId",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "proxyAddress",
          "type": "bytes32"
        }
      ],
      "name": "addSupportedChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "chainToProxyAddress",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        }
      ],
      "name": "collectVotes",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint32",
          "name": "executionChain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        }
      ],
      "name": "createProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentChainID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getActiveProposals",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_sender",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_body",
          "type": "bytes"
        }
      ],
      "name": "handle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "igp",
      "outputs": [
        {
          "internalType": "contract IInterchainGasPaymaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mailbox",
      "outputs": [
        {
          "internalType": "contract IMailbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proposalCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "proposals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "forVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "againstVotes",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startTime",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "executed",
          "type": "bool"
        },
        {
          "internalType": "uint32",
          "name": "executionChain",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "callData",
          "type": "bytes"
        },
        {
          "internalType": "uint32",
          "name": "chainVotesCount",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "quorumPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "supportedChains",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "votingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawExcessEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x46bca8990131fdae35d5774df1c10f1ed47c3b1cdb9b544a00852d68cf3040f4",
  "receipt": {
    "to": null,
    "from": "0x1B10Fae83C2c08C3809E4FEd4e1814F5BF8cD0B3",
    "contractAddress": "0x03D66E8C3b9f3A60dF278AD24AeF0a4836d735AF",
    "transactionIndex": 82,
    "gasUsed": "4098743",
    "logsBloom": "0x
    "blockHash": "0xc5ae7b7ad469098433be05d94f30f0f3b99f4ae252c31a4ab65e81b804786800",
    "transactionHash": "0x46bca8990131fdae35d5774df1c10f1ed47c3b1cdb9b544a00852d68cf3040f4",
    "logs": [
      {
        "transactionIndex": 82,
        "blockNumber": 6551174,
        "transactionHash": "0x46bca8990131fdae35d5774df1c10f1ed47c3b1cdb9b544a00852d68cf3040f4",
        "address": "0x03D66E8C3b9f3A60dF278AD24AeF0a4836d735AF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001b10fae83c2c08c3809e4fed4e1814f5bf8cd0b3"
        ],
        "data": "0x",
        "logIndex": 178,
        "blockHash": "0xc5ae7b7ad469098433be05d94f30f0f3b99f4ae252c31a4ab65e81b804786800"
      }
    ],
    "blockNumber": 6551174,
    "cumulativeGasUsed": "22283982",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbe5a9ae9a6e965fd75a25c7ca6f0349dd378a83f",
    "0xfFAEF09B3cd11D9b20d1a19bECca54EEC2884766",
    "0x6f2756380FD49228ae25Aa7F2817993cB74Ecc56",
    "11155111"
  ],
  "numDeployments": 1,
  "solcInputHash": "b1005f921e47f0fbc5d3fd19f595eed9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governanceToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_mailbox\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_igp\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"}],\"name\":\"CrossChainProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"DispatchFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"executionChain\",\"type\":\"uint32\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"proxyAddress\",\"type\":\"bytes32\"}],\"name\":\"SupportedChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"}],\"name\":\"VotesCollected\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destinationDomain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"executionChain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"_dispatchProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainId\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"proxyAddress\",\"type\":\"bytes32\"}],\"name\":\"addSupportedChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"chainToProxyAddress\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"collectVotes\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint32\",\"name\":\"executionChain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentChainID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getActiveProposals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_sender\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_body\",\"type\":\"bytes\"}],\"name\":\"handle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"igp\",\"outputs\":[{\"internalType\":\"contract IInterchainGasPaymaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mailbox\",\"outputs\":[{\"internalType\":\"contract IMailbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposalCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"proposals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"forVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"againstVotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"executed\",\"type\":\"bool\"},{\"internalType\":\"uint32\",\"name\":\"executionChain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"chainVotesCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quorumPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"supportedChains\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawExcessEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GovernanceCore.sol\":\"GovernanceCore\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/GovernanceCore.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IInterchainGasPaymaster {\\r\\n    function payForGas(\\r\\n        bytes32 _messageId,\\r\\n        uint32 _destinationDomain,\\r\\n        uint256 _gasAmount,\\r\\n        address _refundAddress\\r\\n    ) external payable;\\r\\n\\r\\n      function quoteGasPayment(uint32 _destinationDomain, uint256 _gasAmount) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IMailbox {\\r\\n    function dispatch(\\r\\n        uint32 destinationDomain,\\r\\n        bytes32 recipientAddress,\\r\\n        bytes calldata messageBody\\r\\n    ) external payable returns (bytes32 messageId);\\r\\n\\r\\n    function process(bytes calldata _metadata, bytes calldata _message) external;\\r\\n\\r\\n    function handle(\\r\\n        uint32 _origin,\\r\\n        bytes32 _sender,\\r\\n        bytes calldata _message\\r\\n    ) external payable;\\r\\n\\r\\n    function quoteDispatch(\\r\\n        uint32 destinationDomain,\\r\\n        bytes32 recipientAddress,\\r\\n        bytes calldata messageBody\\r\\n    ) external view returns (uint256 fee);\\r\\n}\\r\\n\\r\\ncontract GovernanceCore is Ownable {\\r\\n    using EnumerableSet for EnumerableSet.UintSet;\\r\\n\\r\\n    IERC20 public governanceToken;\\r\\n    IMailbox public mailbox;\\r\\n    IInterchainGasPaymaster public igp;\\r\\n    uint256 public proposalCount;\\r\\n    uint256 public votingPeriod = 7 days;\\r\\n    uint256 public quorumPercentage = 10;\\r\\n    uint32 public  currentChainID;\\r\\n\\r\\n\\r\\n  struct Proposal {\\r\\n    uint256 id;\\r\\n    address proposer;\\r\\n    string description;\\r\\n    uint256 forVotes;\\r\\n    uint256 againstVotes;\\r\\n    uint256 startTime;\\r\\n    bool executed;\\r\\n    uint32 executionChain;\\r\\n    address target;\\r\\n    bytes callData;\\r\\n    mapping(uint32 => bool) chainVotesCollected;\\r\\n    uint32 chainVotesCount;\\r\\n    mapping(address => bool) hasVoted; // Add this line\\r\\n  }\\r\\n    mapping(uint256 => Proposal) public proposals;\\r\\n    EnumerableSet.UintSet private activeProposals;\\r\\n    mapping(uint32 => bytes32) public chainToProxyAddress;\\r\\n    uint32[] public supportedChains;\\r\\n\\r\\n    event ProposalCreated(uint256 indexed proposalId, address proposer, string description, uint32 executionChain);\\r\\n    event VotesCollected(uint256 indexed proposalId, uint32 chainId, uint256 forVotes, uint256 againstVotes);\\r\\n    event ProposalExecuted(uint256 indexed proposalId);\\r\\n    event CrossChainProposalCreated(uint256 indexed proposalId, uint32 destinationDomain);\\r\\n    event SupportedChainAdded(uint32 chainId, bytes32 proxyAddress);\\r\\n    event Voted(uint256 indexed proposalId, address voter, bool support, uint256 weight);\\r\\n\\r\\n    \\r\\n    constructor(address _governanceToken, address _mailbox, address _igp,uint32 chainId) Ownable(msg.sender) {\\r\\n        governanceToken = IERC20(_governanceToken);\\r\\n        mailbox = IMailbox(_mailbox);\\r\\n        igp = IInterchainGasPaymaster(_igp);\\r\\n        currentChainID = chainId;\\r\\n    }\\r\\n\\r\\n    function addSupportedChain(uint32 chainId, bytes32 proxyAddress) external onlyOwner {\\r\\n        require(chainToProxyAddress[chainId] == bytes32(0), \\\"Chain already supported\\\");\\r\\n        chainToProxyAddress[chainId] = proxyAddress;\\r\\n        supportedChains.push(chainId);\\r\\n        emit SupportedChainAdded(chainId, proxyAddress);\\r\\n    }\\r\\n  \\r\\n  \\r\\n  function createProposal(string memory description, uint32 executionChain, address target, bytes memory callData) external payable {\\r\\n    require(governanceToken.balanceOf(msg.sender) > 0, \\\"Must hold governance tokens to propose\\\");\\r\\n    require(executionChain == currentChainID || chainToProxyAddress[executionChain] != bytes32(0), \\\"Invalid execution chain\\\");\\r\\n\\r\\n    proposalCount++;\\r\\n    Proposal storage newProposal = proposals[proposalCount];\\r\\n    newProposal.id = proposalCount;\\r\\n    newProposal.proposer = msg.sender;\\r\\n    newProposal.description = description;\\r\\n    newProposal.startTime = block.timestamp;\\r\\n    newProposal.executionChain = executionChain;\\r\\n    newProposal.target = target;\\r\\n    newProposal.callData = callData;\\r\\n    newProposal.chainVotesCount = 0;\\r\\n    activeProposals.add(proposalCount);\\r\\n    \\r\\n    emit ProposalCreated(proposalCount, msg.sender, description, executionChain);\\r\\n\\r\\n    uint256 totalFee = 0;\\r\\n    uint256 dispatchedCount = 0;\\r\\n    \\r\\n    for (uint i = 0; i < supportedChains.length; i++) {\\r\\n        uint32 chainId = supportedChains[i];\\r\\n        if (chainId != currentChainID) {\\r\\n            try this._dispatchProposal{value: msg.value - totalFee}(chainId, proposalCount, description, executionChain, target, callData) returns (uint256 fee) {\\r\\n                totalFee += fee;\\r\\n                dispatchedCount++;\\r\\n            } catch Error(string memory reason) {\\r\\n                emit DispatchFailed(chainId, proposalCount, reason);\\r\\n            } catch (bytes memory) {\\r\\n                emit DispatchFailed(chainId, proposalCount, \\\"Unknown error\\\");\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    require(dispatchedCount > 0, \\\"Failed to dispatch to any chain\\\");\\r\\n    require(msg.value >= totalFee, \\\"Insufficient fee provided\\\");\\r\\n    \\r\\n    // Refund excess payment\\r\\n    if (msg.value > totalFee) {\\r\\n        payable(msg.sender).transfer(msg.value - totalFee);\\r\\n    }\\r\\n  }\\r\\n\\r\\nfunction _dispatchProposal(uint32 destinationDomain, uint256 proposalId, string memory description, uint32 executionChain, address target, bytes memory callData) external payable returns (uint256) {\\r\\n    require(msg.sender == address(this), \\\"Only the contract can call this function\\\");\\r\\n\\r\\n    bytes memory message = abi.encode(0, proposalId, description, executionChain, target, callData);\\r\\n    uint256 mailboxFee = mailbox.quoteDispatch(destinationDomain, chainToProxyAddress[destinationDomain], message);\\r\\n    \\r\\n    require(msg.value >= mailboxFee, \\\"Insufficient fee for dispatch\\\");\\r\\n\\r\\n    bytes32 messageId = mailbox.dispatch{value: mailboxFee}(destinationDomain, chainToProxyAddress[destinationDomain], message);\\r\\n\\r\\n    // Estimate gas needed for the destination chain\\r\\n    uint256 gasAmount = 300000; // Adjust this value based on the gas needed on the destination chain\\r\\n    uint256 igpFee = igp.quoteGasPayment(destinationDomain, gasAmount);\\r\\n\\r\\n    require(msg.value >= mailboxFee + igpFee, \\\"Insufficient fee for IGP\\\");\\r\\n\\r\\n    igp.payForGas{value: igpFee}(messageId, destinationDomain, gasAmount, msg.sender);\\r\\n\\r\\n    emit CrossChainProposalCreated(proposalId, destinationDomain);\\r\\n\\r\\n    return mailboxFee + igpFee;\\r\\n}\\r\\n\\r\\nevent DispatchFailed(uint32 chainId, uint256 proposalId, string reason);\\r\\n\\r\\nfunction vote(uint256 proposalId, bool support) external {\\r\\n    require(governanceToken.balanceOf(msg.sender) > 0, \\\"Must hold governance tokens to vote\\\");\\r\\n    Proposal storage proposal = proposals[proposalId];\\r\\n    require(block.timestamp <= proposal.startTime + votingPeriod, \\\"Voting period has ended\\\");\\r\\n    require(!proposal.executed, \\\"Proposal already executed\\\");\\r\\n    require(!proposal.hasVoted[msg.sender], \\\"Already voted\\\"); // Add this line\\r\\n\\r\\n    uint256 voteWeight = governanceToken.balanceOf(msg.sender);\\r\\n\\r\\n    if (support) {\\r\\n        proposal.forVotes += voteWeight;\\r\\n    } else {\\r\\n        proposal.againstVotes += voteWeight;\\r\\n    }\\r\\n\\r\\n    proposal.hasVoted[msg.sender] = true; // Add this line\\r\\n\\r\\n    emit Voted(proposalId, msg.sender, support, voteWeight);\\r\\n    }\\r\\n    \\r\\n    function collectVotes(uint256 proposalId) external payable {\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        require(block.timestamp > proposal.startTime + votingPeriod, \\\"Voting period not ended\\\");\\r\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\r\\n\\r\\n        uint256 totalFee = 0;\\r\\n        for (uint i = 0; i < supportedChains.length; i++) {\\r\\n            uint32 chainId = supportedChains[i];\\r\\n            if (!proposal.chainVotesCollected[chainId]) {\\r\\n                totalFee += _requestVotes(chainId, proposalId);\\r\\n            }\\r\\n        }\\r\\n        require(msg.value >= totalFee, \\\"Insufficient fee provided\\\");\\r\\n    }\\r\\n\\r\\n    function _requestVotes(uint32 destinationDomain, uint256 proposalId) internal returns (uint256) {\\r\\n        bytes memory message = abi.encode(1, proposalId);\\r\\n        uint256 fee = mailbox.quoteDispatch(destinationDomain, chainToProxyAddress[destinationDomain], message);\\r\\n        mailbox.dispatch{value: fee}(destinationDomain, chainToProxyAddress[destinationDomain], message);\\r\\n        return fee;\\r\\n    }\\r\\n\\r\\n    function handle(uint32 _origin, bytes32 _sender, bytes calldata _body) external {\\r\\n        require(msg.sender == address(mailbox), \\\"Only Mailbox can call this function\\\");\\r\\n        require(_sender == chainToProxyAddress[_origin], \\\"Invalid sender\\\");\\r\\n\\r\\n        (uint256 actionType, ) = abi.decode(_body, (uint256, bytes));\\r\\n\\r\\n        if (actionType == 1) {\\r\\n            _handleVoteCollection(_origin, _body);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _handleVoteCollection(uint32 _origin, bytes calldata _body) internal {\\r\\n        (,uint256 proposalId, uint256 forVotes, uint256 againstVotes) = abi.decode(_body, (uint256, uint256, uint256, uint256));\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        require(!proposal.chainVotesCollected[_origin], \\\"Votes already collected for this chain\\\");\\r\\n\\r\\n        proposal.forVotes += forVotes;\\r\\n        proposal.againstVotes += againstVotes;\\r\\n        proposal.chainVotesCollected[_origin] = true;\\r\\n        proposal.chainVotesCount++;\\r\\n\\r\\n        emit VotesCollected(proposalId, _origin, forVotes, againstVotes);\\r\\n\\r\\n        if (proposal.chainVotesCount == supportedChains.length) {\\r\\n            _finalizeProposal(proposalId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _finalizeProposal(uint256 proposalId) internal {\\r\\n        Proposal storage proposal = proposals[proposalId];\\r\\n        uint256 totalVotes = proposal.forVotes + proposal.againstVotes;\\r\\n        uint256 quorumVotes = (governanceToken.totalSupply() * quorumPercentage) / 100;\\r\\n        \\r\\n        if (totalVotes >= quorumVotes && proposal.forVotes > proposal.againstVotes) {\\r\\n            proposal.executed = true;\\r\\n            activeProposals.remove(proposalId);\\r\\n            emit ProposalExecuted(proposalId);\\r\\n            \\r\\n            if (proposal.executionChain == 0) {  // Assuming 0 is the home chain\\r\\n                (bool success, ) = proposal.target.call(proposal.callData);\\r\\n                require(success, \\\"Proposal execution failed\\\");\\r\\n            } else {\\r\\n                _dispatchExecution(proposal.executionChain, proposalId, proposal.target, proposal.callData);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _dispatchExecution(uint32 destinationDomain, uint256 proposalId, address target, bytes memory callData) internal {\\r\\n        bytes memory message = abi.encode(2, proposalId, target, callData);\\r\\n        uint256 fee = mailbox.quoteDispatch(destinationDomain, chainToProxyAddress[destinationDomain], message);\\r\\n        mailbox.dispatch{value: fee}(destinationDomain, chainToProxyAddress[destinationDomain], message);\\r\\n    }\\r\\n\\r\\n    function getActiveProposals() external view returns (uint256[] memory) {\\r\\n        return activeProposals.values();\\r\\n    }\\r\\n\\r\\n    // Function to withdraw any excess ETH\\r\\n    function withdrawExcessEth() external onlyOwner {\\r\\n        payable(owner()).transfer(address(this).balance);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x36b366d5d7e311e6324543332b52ae8e161d6a8e4269b6ca4f71d9c7b1f5fb47\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405262093a80600555600a6006553480156200001d57600080fd5b5060405162004a1f38038062004a1f833981810160405281019062000043919062000328565b33600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b95760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000b09190620003ab565b60405180910390fd5b620000ca81620001b960201b60201c565b5083600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600760006101000a81548163ffffffff021916908363ffffffff16021790555050505050620003c8565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002af8262000282565b9050919050565b620002c181620002a2565b8114620002cd57600080fd5b50565b600081519050620002e181620002b6565b92915050565b600063ffffffff82169050919050565b6200030281620002e7565b81146200030e57600080fd5b50565b6000815190506200032281620002f7565b92915050565b600080600080608085870312156200034557620003446200027d565b5b60006200035587828801620002d0565b94505060206200036887828801620002d0565b93505060406200037b87828801620002d0565b92505060606200038e8782880162000311565b91505092959194509250565b620003a581620002a2565b82525050565b6000602082019050620003c260008301846200039a565b92915050565b61464780620003d86000396000f3fe60806040526004361061012a5760003560e01c80638da5cb5b116100ab578063d5438eae1161006f578063d5438eae146103bc578063da35c664146103e7578063dda6a10f14610412578063f28b2daa1461042e578063f2fde38b14610459578063f96dae0a146104825761012a565b80638da5cb5b146102f8578063aa62c24614610323578063b179e1e71461033f578063b440720d1461036a578063c9d27afe146103935761012a565b80635584c4f9116100f25780635584c4f91461024657806356d5d475146102715780636d31bee71461029a578063715018a6146102ca57806382a00b3c146102e15761012a565b8063013cf08b1461012f57806302a251a314610176578063223c951d146101a15780634fa76ec9146101de578063548d496f14610209575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906126d4565b6104ad565b60405161016d9b9a99989796959493929190612870565b60405180910390f35b34801561018257600080fd5b5061018b610684565b6040516101989190612929565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190612970565b61068a565b6040516101d591906129b6565b60405180910390f35b3480156101ea57600080fd5b506101f36106a2565b6040516102009190612929565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b91906126d4565b6106a8565b60405161023d91906129d1565b60405180910390f35b34801561025257600080fd5b5061025b6106e2565b6040516102689190612aaa565b60405180910390f35b34801561027d57600080fd5b5061029860048036038101906102939190612b5d565b6106f3565b005b6102b460048036038101906102af9190612dce565b610813565b6040516102c19190612929565b60405180910390f35b3480156102d657600080fd5b506102df610c5e565b005b3480156102ed57600080fd5b506102f6610c72565b005b34801561030457600080fd5b5061030d610cca565b60405161031a9190612e93565b60405180910390f35b61033d60048036038101906103389190612eae565b610cf3565b005b34801561034b57600080fd5b506103546112ee565b60405161036191906129d1565b60405180910390f35b34801561037657600080fd5b50610391600480360381019061038c9190612f4d565b611304565b005b34801561039f57600080fd5b506103ba60048036038101906103b59190612fb9565b61141f565b005b3480156103c857600080fd5b506103d16117c7565b6040516103de9190613058565b60405180910390f35b3480156103f357600080fd5b506103fc6117ed565b6040516104099190612929565b60405180910390f35b61042c600480360381019061042791906126d4565b6117f3565b005b34801561043a57600080fd5b506104436119a6565b6040516104509190613094565b60405180910390f35b34801561046557600080fd5b50610480600480360381019061047b91906130af565b6119cc565b005b34801561048e57600080fd5b50610497611a52565b6040516104a491906130fd565b60405180910390f35b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546104fc90613147565b80601f016020809104026020016040519081016040528092919081815260200182805461052890613147565b80156105755780601f1061054a57610100808354040283529160200191610575565b820191906000526020600020905b81548152906001019060200180831161055857829003601f168201915b5050505050908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900463ffffffff16908060060160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070180546105eb90613147565b80601f016020809104026020016040519081016040528092919081815260200182805461061790613147565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b5050505050908060090160009054906101000a900463ffffffff1690508b565b60055481565b600b6020528060005260406000206000915090505481565b60065481565b600c81815481106106b857600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b60606106ee6009611a78565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a906131ea565b60405180910390fd5b600b60008563ffffffff1663ffffffff1681526020019081526020016000205483146107e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107db90613256565b60405180910390fd5b600082828101906107f59190613276565b5090506001810361080c5761080b858484611a99565b5b5050505050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90613344565b60405180910390fd5b60008087878787876040516020016108a0969594939291906133ac565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd188a600b60008d63ffffffff1663ffffffff16815260200190815260200160002054856040518463ffffffff1660e01b81526004016109319392919061341b565b602060405180830381865afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610972919061346e565b9050803410156109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae906134e7565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de01838c600b60008f63ffffffff1663ffffffff16815260200190815260200160002054876040518563ffffffff1660e01b8152600401610a389392919061341b565b60206040518083038185885af1158015610a56573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a7b919061351c565b90506000620493e090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a69297938d846040518363ffffffff1660e01b8152600401610ae4929190613549565b602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b25919061346e565b90508084610b3391906135a1565b341015610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c90613621565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311bf2c1882858f86336040518663ffffffff1660e01b8152600401610bd79493929190613641565b6000604051808303818588803b158015610bf057600080fd5b505af1158015610c04573d6000803e3d6000fd5b50505050508a7f0b77b812328792f5d2af6a5fe6b2299443f0215da7198d4a1545452b6f0567538d604051610c3991906129d1565b60405180910390a28084610c4d91906135a1565b955050505050509695505050505050565b610c66611c62565b610c706000611ce9565b565b610c7a611c62565b610c82610cca565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610cc7573d6000803e3d6000fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d509190612e93565b602060405180830381865afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d91919061346e565b11610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc8906136f8565b60405180910390fd5b600760009054906101000a900463ffffffff1663ffffffff168363ffffffff161480610e1f57506000801b600b60008563ffffffff1663ffffffff1681526020019081526020016000205414155b610e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5590613764565b60405180910390fd5b60046000815480929190610e7190613784565b9190505550600060086000600454815260200190815260200160002090506004548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816002019081610eee919061396e565b50428160050181905550838160060160016101000a81548163ffffffff021916908363ffffffff160217905550828160060160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081816007019081610f6f9190613a9b565b5060008160090160006101000a81548163ffffffff021916908363ffffffff160217905550610faa6004546009611dad90919063ffffffff16565b506004547f79a06fa3c19f5d47d5ebaf9366d3e6fd2438d612f22645d6aea09b6cd97a890c338787604051610fe193929190613b6d565b60405180910390a260008060005b600c80549050811015611203576000600c828154811061101257611011613bab565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050600760009054906101000a900463ffffffff1663ffffffff168163ffffffff16146111ef573073ffffffffffffffffffffffffffffffffffffffff16636d31bee785346110879190613bda565b836004548d8d8d8d6040518863ffffffff1660e01b81526004016110b096959493929190613c0e565b60206040518083038185885af1935050505080156110ec57506040513d601f19601f820116820180604052508101906110e9919061346e565b60015b6111d0576110f8613c8a565b806308c379a00361115a575061110c613cac565b80611117575061115c565b7f479db21d7e67b9cc2336ef59e41a37079f67776d8c5a7949b547636d88c6592d826004548360405161114c93929190613d3c565b60405180910390a1506111cb565b505b3d8060008114611188576040519150601f19603f3d011682016040523d82523d6000602084013e61118d565b606091505b507f479db21d7e67b9cc2336ef59e41a37079f67776d8c5a7949b547636d88c6592d826004546040516111c1929190613dc6565b60405180910390a1505b6111ee565b80856111dc91906135a1565b945083806111e990613784565b945050505b5b5080806111fb90613784565b915050610fef565b5060008111611247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123e90613e4e565b60405180910390fd5b8134101561128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128190613eba565b60405180910390fd5b813411156112e5573373ffffffffffffffffffffffffffffffffffffffff166108fc83346112b89190613bda565b9081150290604051600060405180830381858888f193505050501580156112e3573d6000803e3d6000fd5b505b50505050505050565b600760009054906101000a900463ffffffff1681565b61130c611c62565b6000801b600b60008463ffffffff1663ffffffff1681526020019081526020016000205414611370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136790613f26565b60405180910390fd5b80600b60008463ffffffff1663ffffffff16815260200190815260200160002081905550600c8290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff1602179055507f80c6704ccc40eeef3efbeaed114bedac0a55ae94dbfddba0804b9b7f431e00518282604051611413929190613f46565b60405180910390a15050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161147c9190612e93565b602060405180830381865afa158015611499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bd919061346e565b116114fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f490613fe1565b60405180910390fd5b6000600860008481526020019081526020016000209050600554816005015461152691906135a1565b421115611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155f9061404d565b60405180910390fd5b8060060160009054906101000a900460ff16156115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b1906140b9565b60405180910390fd5b80600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164090614125565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016116a69190612e93565b602060405180830381865afa1580156116c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e7919061346e565b9050821561170f578082600301600082825461170391906135a1565b9250508190555061172b565b8082600401600082825461172391906135a1565b925050819055505b600182600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550837f7c2de587c00d75474a0c6c6fa96fd3b45dc974cd4e8a75f712bb84c950dce1b53385846040516117b993929190614145565b60405180910390a250505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000600860008381526020019081526020016000209050600554816005015461181c91906135a1565b421161185d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611854906141c8565b60405180910390fd5b8060060160009054906101000a900460ff16156118af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a6906140b9565b60405180910390fd5b6000805b600c8054905081101561195d576000600c82815481106118d6576118d5613bab565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690508360080160008263ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff166119495761193b8186611dc7565b8361194691906135a1565b92505b50808061195590613784565b9150506118b3565b50803410156119a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199890613eba565b60405180910390fd5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119d4611c62565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a465760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611a3d9190612e93565b60405180910390fd5b611a4f81611ce9565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000611a8883600001611f80565b905060608190508092505050919050565b60008060008484810190611aad91906141e8565b9350935093505060006008600085815260200190815260200160002090508060080160008863ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff1615611b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b31906142c1565b60405180910390fd5b82816003016000828254611b4e91906135a1565b9250508190555081816004016000828254611b6991906135a1565b9250508190555060018160080160008963ffffffff1663ffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600901600081819054906101000a900463ffffffff1680929190611bce906142e1565b91906101000a81548163ffffffff021916908363ffffffff16021790555050837f3041511d11da95916f337299a30f01b387a2444bed3a0a00abffe20750146660888585604051611c219392919061430d565b60405180910390a2600c805490508160090160009054906101000a900463ffffffff1663ffffffff1603611c5957611c5884611fdc565b5b50505050505050565b611c6a612308565b73ffffffffffffffffffffffffffffffffffffffff16611c88610cca565b73ffffffffffffffffffffffffffffffffffffffff1614611ce757611cab612308565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611cde9190612e93565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611dbf836000018360001b612310565b905092915050565b600080600183604051602001611dde92919061437f565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd1886600b60008963ffffffff1663ffffffff16815260200190815260200160002054856040518463ffffffff1660e01b8152600401611e6f9392919061341b565b602060405180830381865afa158015611e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb0919061346e565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de018287600b60008a63ffffffff1663ffffffff16815260200190815260200160002054866040518563ffffffff1660e01b8152600401611f319392919061341b565b60206040518083038185885af1158015611f4f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611f74919061351c565b50809250505092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611fd057602002820191906000526020600020905b815481526020019060010190808311611fbc575b50505050509050919050565b600060086000838152602001908152602001600020905060008160040154826003015461200991906135a1565b905060006064600654600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a3919061346e565b6120ad91906143a8565b6120b79190614419565b90508082101580156120d0575082600401548360030154115b156123025760018360060160006101000a81548160ff02191690831515021790555061210684600961238090919063ffffffff16565b50837f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f60405160405180910390a260008360060160019054906101000a900463ffffffff1663ffffffff16036122305760008360060160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846007016040516121a491906144d8565b6000604051808303816000865af19150503d80600081146121e1576040519150601f19603f3d011682016040523d82523d6000602084013e6121e6565b606091505b505090508061222a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122219061453b565b60405180910390fd5b50612301565b6123008360060160019054906101000a900463ffffffff16858560060160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600701805461227d90613147565b80601f01602080910402602001604051908101604052809291908181526020018280546122a990613147565b80156122f65780601f106122cb576101008083540402835291602001916122f6565b820191906000526020600020905b8154815290600101906020018083116122d957829003601f168201915b505050505061239a565b5b5b50505050565b600033905090565b600061231c8383612553565b61237557826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061237a565b600090505b92915050565b6000612392836000018360001b612576565b905092915050565b600060028484846040516020016123b49493929190614596565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd1887600b60008a63ffffffff1663ffffffff16815260200190815260200160002054856040518463ffffffff1660e01b81526004016124459392919061341b565b602060405180830381865afa158015612462573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612486919061346e565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de018288600b60008b63ffffffff1663ffffffff16815260200190815260200160002054866040518563ffffffff1660e01b81526004016125079392919061341b565b60206040518083038185885af1158015612525573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061254a919061351c565b50505050505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461267e5760006001826125a89190613bda565b90506000600186600001805490506125c09190613bda565b905080821461262f5760008660000182815481106125e1576125e0613bab565b5b906000526020600020015490508087600001848154811061260557612604613bab565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612643576126426145e2565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612684565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6126b18161269e565b81146126bc57600080fd5b50565b6000813590506126ce816126a8565b92915050565b6000602082840312156126ea576126e9612694565b5b60006126f8848285016126bf565b91505092915050565b61270a8161269e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061273b82612710565b9050919050565b61274b81612730565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561278b578082015181840152602081019050612770565b60008484015250505050565b6000601f19601f8301169050919050565b60006127b382612751565b6127bd818561275c565b93506127cd81856020860161276d565b6127d681612797565b840191505092915050565b60008115159050919050565b6127f6816127e1565b82525050565b600063ffffffff82169050919050565b612815816127fc565b82525050565b600081519050919050565b600082825260208201905092915050565b60006128428261281b565b61284c8185612826565b935061285c81856020860161276d565b61286581612797565b840191505092915050565b600061016082019050612886600083018e612701565b612893602083018d612742565b81810360408301526128a5818c6127a8565b90506128b4606083018b612701565b6128c1608083018a612701565b6128ce60a0830189612701565b6128db60c08301886127ed565b6128e860e083018761280c565b6128f6610100830186612742565b8181036101208301526129098185612837565b905061291961014083018461280c565b9c9b505050505050505050505050565b600060208201905061293e6000830184612701565b92915050565b61294d816127fc565b811461295857600080fd5b50565b60008135905061296a81612944565b92915050565b60006020828403121561298657612985612694565b5b60006129948482850161295b565b91505092915050565b6000819050919050565b6129b08161299d565b82525050565b60006020820190506129cb60008301846129a7565b92915050565b60006020820190506129e6600083018461280c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a218161269e565b82525050565b6000612a338383612a18565b60208301905092915050565b6000602082019050919050565b6000612a57826129ec565b612a6181856129f7565b9350612a6c83612a08565b8060005b83811015612a9d578151612a848882612a27565b9750612a8f83612a3f565b925050600181019050612a70565b5085935050505092915050565b60006020820190508181036000830152612ac48184612a4c565b905092915050565b612ad58161299d565b8114612ae057600080fd5b50565b600081359050612af281612acc565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612b1d57612b1c612af8565b5b8235905067ffffffffffffffff811115612b3a57612b39612afd565b5b602083019150836001820283011115612b5657612b55612b02565b5b9250929050565b60008060008060608587031215612b7757612b76612694565b5b6000612b858782880161295b565b9450506020612b9687828801612ae3565b935050604085013567ffffffffffffffff811115612bb757612bb6612699565b5b612bc387828801612b07565b925092505092959194509250565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c0e82612797565b810181811067ffffffffffffffff82111715612c2d57612c2c612bd6565b5b80604052505050565b6000612c4061268a565b9050612c4c8282612c05565b919050565b600067ffffffffffffffff821115612c6c57612c6b612bd6565b5b612c7582612797565b9050602081019050919050565b82818337600083830152505050565b6000612ca4612c9f84612c51565b612c36565b905082815260208101848484011115612cc057612cbf612bd1565b5b612ccb848285612c82565b509392505050565b600082601f830112612ce857612ce7612af8565b5b8135612cf8848260208601612c91565b91505092915050565b612d0a81612730565b8114612d1557600080fd5b50565b600081359050612d2781612d01565b92915050565b600067ffffffffffffffff821115612d4857612d47612bd6565b5b612d5182612797565b9050602081019050919050565b6000612d71612d6c84612d2d565b612c36565b905082815260208101848484011115612d8d57612d8c612bd1565b5b612d98848285612c82565b509392505050565b600082601f830112612db557612db4612af8565b5b8135612dc5848260208601612d5e565b91505092915050565b60008060008060008060c08789031215612deb57612dea612694565b5b6000612df989828a0161295b565b9650506020612e0a89828a016126bf565b955050604087013567ffffffffffffffff811115612e2b57612e2a612699565b5b612e3789828a01612cd3565b9450506060612e4889828a0161295b565b9350506080612e5989828a01612d18565b92505060a087013567ffffffffffffffff811115612e7a57612e79612699565b5b612e8689828a01612da0565b9150509295509295509295565b6000602082019050612ea86000830184612742565b92915050565b60008060008060808587031215612ec857612ec7612694565b5b600085013567ffffffffffffffff811115612ee657612ee5612699565b5b612ef287828801612cd3565b9450506020612f038782880161295b565b9350506040612f1487828801612d18565b925050606085013567ffffffffffffffff811115612f3557612f34612699565b5b612f4187828801612da0565b91505092959194509250565b60008060408385031215612f6457612f63612694565b5b6000612f728582860161295b565b9250506020612f8385828601612ae3565b9150509250929050565b612f96816127e1565b8114612fa157600080fd5b50565b600081359050612fb381612f8d565b92915050565b60008060408385031215612fd057612fcf612694565b5b6000612fde858286016126bf565b9250506020612fef85828601612fa4565b9150509250929050565b6000819050919050565b600061301e61301961301484612710565b612ff9565b612710565b9050919050565b600061303082613003565b9050919050565b600061304282613025565b9050919050565b61305281613037565b82525050565b600060208201905061306d6000830184613049565b92915050565b600061307e82613025565b9050919050565b61308e81613073565b82525050565b60006020820190506130a96000830184613085565b92915050565b6000602082840312156130c5576130c4612694565b5b60006130d384828501612d18565b91505092915050565b60006130e782613025565b9050919050565b6130f7816130dc565b82525050565b600060208201905061311260008301846130ee565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061315f57607f821691505b60208210810361317257613171613118565b5b50919050565b7f4f6e6c79204d61696c626f782063616e2063616c6c20746869732066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b60006131d460238361275c565b91506131df82613178565b604082019050919050565b60006020820190508181036000830152613203816131c7565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000613240600e8361275c565b915061324b8261320a565b602082019050919050565b6000602082019050818103600083015261326f81613233565b9050919050565b6000806040838503121561328d5761328c612694565b5b600061329b858286016126bf565b925050602083013567ffffffffffffffff8111156132bc576132bb612699565b5b6132c885828601612da0565b9150509250929050565b7f4f6e6c792074686520636f6e74726163742063616e2063616c6c20746869732060008201527f66756e6374696f6e000000000000000000000000000000000000000000000000602082015250565b600061332e60288361275c565b9150613339826132d2565b604082019050919050565b6000602082019050818103600083015261335d81613321565b9050919050565b6000819050919050565b600060ff82169050919050565b600061339661339161338c84613364565b612ff9565b61336e565b9050919050565b6133a68161337b565b82525050565b600060c0820190506133c1600083018961339d565b6133ce6020830188612701565b81810360408301526133e081876127a8565b90506133ef606083018661280c565b6133fc6080830185612742565b81810360a083015261340e8184612837565b9050979650505050505050565b6000606082019050613430600083018661280c565b61343d60208301856129a7565b818103604083015261344f8184612837565b9050949350505050565b600081519050613468816126a8565b92915050565b60006020828403121561348457613483612694565b5b600061349284828501613459565b91505092915050565b7f496e73756666696369656e742066656520666f72206469737061746368000000600082015250565b60006134d1601d8361275c565b91506134dc8261349b565b602082019050919050565b60006020820190508181036000830152613500816134c4565b9050919050565b60008151905061351681612acc565b92915050565b60006020828403121561353257613531612694565b5b600061354084828501613507565b91505092915050565b600060408201905061355e600083018561280c565b61356b6020830184612701565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135ac8261269e565b91506135b78361269e565b92508282019050808211156135cf576135ce613572565b5b92915050565b7f496e73756666696369656e742066656520666f72204947500000000000000000600082015250565b600061360b60188361275c565b9150613616826135d5565b602082019050919050565b6000602082019050818103600083015261363a816135fe565b9050919050565b600060808201905061365660008301876129a7565b613663602083018661280c565b6136706040830185612701565b61367d6060830184612742565b95945050505050565b7f4d75737420686f6c6420676f7665726e616e636520746f6b656e7320746f207060008201527f726f706f73650000000000000000000000000000000000000000000000000000602082015250565b60006136e260268361275c565b91506136ed82613686565b604082019050919050565b60006020820190508181036000830152613711816136d5565b9050919050565b7f496e76616c696420657865637574696f6e20636861696e000000000000000000600082015250565b600061374e60178361275c565b915061375982613718565b602082019050919050565b6000602082019050818103600083015261377d81613741565b9050919050565b600061378f8261269e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036137c1576137c0613572565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261382e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826137f1565b61383886836137f1565b95508019841693508086168417925050509392505050565b600061386b6138666138618461269e565b612ff9565b61269e565b9050919050565b6000819050919050565b61388583613850565b61389961389182613872565b8484546137fe565b825550505050565b600090565b6138ae6138a1565b6138b981848461387c565b505050565b5b818110156138dd576138d26000826138a6565b6001810190506138bf565b5050565b601f821115613922576138f3816137cc565b6138fc846137e1565b8101602085101561390b578190505b61391f613917856137e1565b8301826138be565b50505b505050565b600082821c905092915050565b600061394560001984600802613927565b1980831691505092915050565b600061395e8383613934565b9150826002028217905092915050565b61397782612751565b67ffffffffffffffff8111156139905761398f612bd6565b5b61399a8254613147565b6139a58282856138e1565b600060209050601f8311600181146139d857600084156139c6578287015190505b6139d08582613952565b865550613a38565b601f1984166139e6866137cc565b60005b82811015613a0e578489015182556001820191506020850194506020810190506139e9565b86831015613a2b5784890151613a27601f891682613934565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f821115613a9657613a6781613a40565b613a70846137e1565b81016020851015613a7f578190505b613a93613a8b856137e1565b8301826138be565b50505b505050565b613aa48261281b565b67ffffffffffffffff811115613abd57613abc612bd6565b5b613ac78254613147565b613ad2828285613a55565b600060209050601f831160018114613b055760008415613af3578287015190505b613afd8582613952565b865550613b65565b601f198416613b1386613a40565b60005b82811015613b3b57848901518255600182019150602085019450602081019050613b16565b86831015613b585784890151613b54601f891682613934565b8355505b6001600288020188555050505b505050505050565b6000606082019050613b826000830186612742565b8181036020830152613b9481856127a8565b9050613ba3604083018461280c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613be58261269e565b9150613bf08361269e565b9250828203905081811115613c0857613c07613572565b5b92915050565b600060c082019050613c23600083018961280c565b613c306020830188612701565b8181036040830152613c4281876127a8565b9050613c51606083018661280c565b613c5e6080830185612742565b81810360a0830152613c708184612837565b9050979650505050505050565b60008160e01c9050919050565b600060033d1115613ca95760046000803e613ca6600051613c7d565b90505b90565b600060443d10613d3957613cbe61268a565b60043d036004823e80513d602482011167ffffffffffffffff82111715613ce6575050613d39565b808201805167ffffffffffffffff811115613d045750505050613d39565b80602083010160043d038501811115613d21575050505050613d39565b613d3082602001850186612c05565b82955050505050505b90565b6000606082019050613d51600083018661280c565b613d5e6020830185612701565b8181036040830152613d7081846127a8565b9050949350505050565b7f556e6b6e6f776e206572726f7200000000000000000000000000000000000000600082015250565b6000613db0600d8361275c565b9150613dbb82613d7a565b602082019050919050565b6000606082019050613ddb600083018561280c565b613de86020830184612701565b8181036040830152613df981613da3565b90509392505050565b7f4661696c656420746f20646973706174636820746f20616e7920636861696e00600082015250565b6000613e38601f8361275c565b9150613e4382613e02565b602082019050919050565b60006020820190508181036000830152613e6781613e2b565b9050919050565b7f496e73756666696369656e74206665652070726f766964656400000000000000600082015250565b6000613ea460198361275c565b9150613eaf82613e6e565b602082019050919050565b60006020820190508181036000830152613ed381613e97565b9050919050565b7f436861696e20616c726561647920737570706f72746564000000000000000000600082015250565b6000613f1060178361275c565b9150613f1b82613eda565b602082019050919050565b60006020820190508181036000830152613f3f81613f03565b9050919050565b6000604082019050613f5b600083018561280c565b613f6860208301846129a7565b9392505050565b7f4d75737420686f6c6420676f7665726e616e636520746f6b656e7320746f207660008201527f6f74650000000000000000000000000000000000000000000000000000000000602082015250565b6000613fcb60238361275c565b9150613fd682613f6f565b604082019050919050565b60006020820190508181036000830152613ffa81613fbe565b9050919050565b7f566f74696e6720706572696f642068617320656e646564000000000000000000600082015250565b600061403760178361275c565b915061404282614001565b602082019050919050565b600060208201905081810360008301526140668161402a565b9050919050565b7f50726f706f73616c20616c726561647920657865637574656400000000000000600082015250565b60006140a360198361275c565b91506140ae8261406d565b602082019050919050565b600060208201905081810360008301526140d281614096565b9050919050565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b600061410f600d8361275c565b915061411a826140d9565b602082019050919050565b6000602082019050818103600083015261413e81614102565b9050919050565b600060608201905061415a6000830186612742565b61416760208301856127ed565b6141746040830184612701565b949350505050565b7f566f74696e6720706572696f64206e6f7420656e646564000000000000000000600082015250565b60006141b260178361275c565b91506141bd8261417c565b602082019050919050565b600060208201905081810360008301526141e1816141a5565b9050919050565b6000806000806080858703121561420257614201612694565b5b6000614210878288016126bf565b9450506020614221878288016126bf565b9350506040614232878288016126bf565b9250506060614243878288016126bf565b91505092959194509250565b7f566f74657320616c726561647920636f6c6c656374656420666f72207468697360008201527f20636861696e0000000000000000000000000000000000000000000000000000602082015250565b60006142ab60268361275c565b91506142b68261424f565b604082019050919050565b600060208201905081810360008301526142da8161429e565b9050919050565b60006142ec826127fc565b915063ffffffff820361430257614301613572565b5b600182019050919050565b6000606082019050614322600083018661280c565b61432f6020830185612701565b61433c6040830184612701565b949350505050565b6000819050919050565b600061436961436461435f84614344565b612ff9565b61336e565b9050919050565b6143798161434e565b82525050565b60006040820190506143946000830185614370565b6143a16020830184612701565b9392505050565b60006143b38261269e565b91506143be8361269e565b92508282026143cc8161269e565b915082820484148315176143e3576143e2613572565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006144248261269e565b915061442f8361269e565b92508261443f5761443e6143ea565b5b828204905092915050565b600081905092915050565b6000815461446281613147565b61446c818661444a565b94506001821660008114614487576001811461449c576144cf565b60ff19831686528115158202860193506144cf565b6144a585613a40565b60005b838110156144c7578154818901526001820191506020810190506144a8565b838801955050505b50505092915050565b60006144e48284614455565b915081905092915050565b7f50726f706f73616c20657865637574696f6e206661696c656400000000000000600082015250565b600061452560198361275c565b9150614530826144ef565b602082019050919050565b6000602082019050818103600083015261455481614518565b9050919050565b6000819050919050565b600061458061457b6145768461455b565b612ff9565b61336e565b9050919050565b61459081614565565b82525050565b60006080820190506145ab6000830187614587565b6145b86020830186612701565b6145c56040830185612742565b81810360608301526145d78184612837565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d8049513d7d22e1fdcfc91717f9fa3a45c13b21632451e70a0495c34c9bcf54464736f6c63430008140033",
  "deployedBytecode": "0x60806040526004361061012a5760003560e01c80638da5cb5b116100ab578063d5438eae1161006f578063d5438eae146103bc578063da35c664146103e7578063dda6a10f14610412578063f28b2daa1461042e578063f2fde38b14610459578063f96dae0a146104825761012a565b80638da5cb5b146102f8578063aa62c24614610323578063b179e1e71461033f578063b440720d1461036a578063c9d27afe146103935761012a565b80635584c4f9116100f25780635584c4f91461024657806356d5d475146102715780636d31bee71461029a578063715018a6146102ca57806382a00b3c146102e15761012a565b8063013cf08b1461012f57806302a251a314610176578063223c951d146101a15780634fa76ec9146101de578063548d496f14610209575b600080fd5b34801561013b57600080fd5b50610156600480360381019061015191906126d4565b6104ad565b60405161016d9b9a99989796959493929190612870565b60405180910390f35b34801561018257600080fd5b5061018b610684565b6040516101989190612929565b60405180910390f35b3480156101ad57600080fd5b506101c860048036038101906101c39190612970565b61068a565b6040516101d591906129b6565b60405180910390f35b3480156101ea57600080fd5b506101f36106a2565b6040516102009190612929565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b91906126d4565b6106a8565b60405161023d91906129d1565b60405180910390f35b34801561025257600080fd5b5061025b6106e2565b6040516102689190612aaa565b60405180910390f35b34801561027d57600080fd5b5061029860048036038101906102939190612b5d565b6106f3565b005b6102b460048036038101906102af9190612dce565b610813565b6040516102c19190612929565b60405180910390f35b3480156102d657600080fd5b506102df610c5e565b005b3480156102ed57600080fd5b506102f6610c72565b005b34801561030457600080fd5b5061030d610cca565b60405161031a9190612e93565b60405180910390f35b61033d60048036038101906103389190612eae565b610cf3565b005b34801561034b57600080fd5b506103546112ee565b60405161036191906129d1565b60405180910390f35b34801561037657600080fd5b50610391600480360381019061038c9190612f4d565b611304565b005b34801561039f57600080fd5b506103ba60048036038101906103b59190612fb9565b61141f565b005b3480156103c857600080fd5b506103d16117c7565b6040516103de9190613058565b60405180910390f35b3480156103f357600080fd5b506103fc6117ed565b6040516104099190612929565b60405180910390f35b61042c600480360381019061042791906126d4565b6117f3565b005b34801561043a57600080fd5b506104436119a6565b6040516104509190613094565b60405180910390f35b34801561046557600080fd5b50610480600480360381019061047b91906130af565b6119cc565b005b34801561048e57600080fd5b50610497611a52565b6040516104a491906130fd565b60405180910390f35b60086020528060005260406000206000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020180546104fc90613147565b80601f016020809104026020016040519081016040528092919081815260200182805461052890613147565b80156105755780601f1061054a57610100808354040283529160200191610575565b820191906000526020600020905b81548152906001019060200180831161055857829003601f168201915b5050505050908060030154908060040154908060050154908060060160009054906101000a900460ff16908060060160019054906101000a900463ffffffff16908060060160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060070180546105eb90613147565b80601f016020809104026020016040519081016040528092919081815260200182805461061790613147565b80156106645780601f1061063957610100808354040283529160200191610664565b820191906000526020600020905b81548152906001019060200180831161064757829003601f168201915b5050505050908060090160009054906101000a900463ffffffff1690508b565b60055481565b600b6020528060005260406000206000915090505481565b60065481565b600c81815481106106b857600080fd5b9060005260206000209060089182820401919006600402915054906101000a900463ffffffff1681565b60606106ee6009611a78565b905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610783576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077a906131ea565b60405180910390fd5b600b60008563ffffffff1663ffffffff1681526020019081526020016000205483146107e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107db90613256565b60405180910390fd5b600082828101906107f59190613276565b5090506001810361080c5761080b858484611a99565b5b5050505050565b60003073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610883576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087a90613344565b60405180910390fd5b60008087878787876040516020016108a0969594939291906133ac565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd188a600b60008d63ffffffff1663ffffffff16815260200190815260200160002054856040518463ffffffff1660e01b81526004016109319392919061341b565b602060405180830381865afa15801561094e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610972919061346e565b9050803410156109b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ae906134e7565b60405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de01838c600b60008f63ffffffff1663ffffffff16815260200190815260200160002054876040518563ffffffff1660e01b8152600401610a389392919061341b565b60206040518083038185885af1158015610a56573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610a7b919061351c565b90506000620493e090506000600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a69297938d846040518363ffffffff1660e01b8152600401610ae4929190613549565b602060405180830381865afa158015610b01573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b25919061346e565b90508084610b3391906135a1565b341015610b75576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6c90613621565b60405180910390fd5b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166311bf2c1882858f86336040518663ffffffff1660e01b8152600401610bd79493929190613641565b6000604051808303818588803b158015610bf057600080fd5b505af1158015610c04573d6000803e3d6000fd5b50505050508a7f0b77b812328792f5d2af6a5fe6b2299443f0215da7198d4a1545452b6f0567538d604051610c3991906129d1565b60405180910390a28084610c4d91906135a1565b955050505050509695505050505050565b610c66611c62565b610c706000611ce9565b565b610c7a611c62565b610c82610cca565b73ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610cc7573d6000803e3d6000fd5b50565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b8152600401610d509190612e93565b602060405180830381865afa158015610d6d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d91919061346e565b11610dd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc8906136f8565b60405180910390fd5b600760009054906101000a900463ffffffff1663ffffffff168363ffffffff161480610e1f57506000801b600b60008563ffffffff1663ffffffff1681526020019081526020016000205414155b610e5e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5590613764565b60405180910390fd5b60046000815480929190610e7190613784565b9190505550600060086000600454815260200190815260200160002090506004548160000181905550338160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084816002019081610eee919061396e565b50428160050181905550838160060160016101000a81548163ffffffff021916908363ffffffff160217905550828160060160056101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081816007019081610f6f9190613a9b565b5060008160090160006101000a81548163ffffffff021916908363ffffffff160217905550610faa6004546009611dad90919063ffffffff16565b506004547f79a06fa3c19f5d47d5ebaf9366d3e6fd2438d612f22645d6aea09b6cd97a890c338787604051610fe193929190613b6d565b60405180910390a260008060005b600c80549050811015611203576000600c828154811061101257611011613bab565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050600760009054906101000a900463ffffffff1663ffffffff168163ffffffff16146111ef573073ffffffffffffffffffffffffffffffffffffffff16636d31bee785346110879190613bda565b836004548d8d8d8d6040518863ffffffff1660e01b81526004016110b096959493929190613c0e565b60206040518083038185885af1935050505080156110ec57506040513d601f19601f820116820180604052508101906110e9919061346e565b60015b6111d0576110f8613c8a565b806308c379a00361115a575061110c613cac565b80611117575061115c565b7f479db21d7e67b9cc2336ef59e41a37079f67776d8c5a7949b547636d88c6592d826004548360405161114c93929190613d3c565b60405180910390a1506111cb565b505b3d8060008114611188576040519150601f19603f3d011682016040523d82523d6000602084013e61118d565b606091505b507f479db21d7e67b9cc2336ef59e41a37079f67776d8c5a7949b547636d88c6592d826004546040516111c1929190613dc6565b60405180910390a1505b6111ee565b80856111dc91906135a1565b945083806111e990613784565b945050505b5b5080806111fb90613784565b915050610fef565b5060008111611247576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161123e90613e4e565b60405180910390fd5b8134101561128a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128190613eba565b60405180910390fd5b813411156112e5573373ffffffffffffffffffffffffffffffffffffffff166108fc83346112b89190613bda565b9081150290604051600060405180830381858888f193505050501580156112e3573d6000803e3d6000fd5b505b50505050505050565b600760009054906101000a900463ffffffff1681565b61130c611c62565b6000801b600b60008463ffffffff1663ffffffff1681526020019081526020016000205414611370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136790613f26565b60405180910390fd5b80600b60008463ffffffff1663ffffffff16815260200190815260200160002081905550600c8290806001815401808255809150506001900390600052602060002090600891828204019190066004029091909190916101000a81548163ffffffff021916908363ffffffff1602179055507f80c6704ccc40eeef3efbeaed114bedac0a55ae94dbfddba0804b9b7f431e00518282604051611413929190613f46565b60405180910390a15050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b815260040161147c9190612e93565b602060405180830381865afa158015611499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bd919061346e565b116114fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114f490613fe1565b60405180910390fd5b6000600860008481526020019081526020016000209050600554816005015461152691906135a1565b421115611568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155f9061404d565b60405180910390fd5b8060060160009054906101000a900460ff16156115ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b1906140b9565b60405180910390fd5b80600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611649576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164090614125565b60405180910390fd5b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016116a69190612e93565b602060405180830381865afa1580156116c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e7919061346e565b9050821561170f578082600301600082825461170391906135a1565b9250508190555061172b565b8082600401600082825461172391906135a1565b925050819055505b600182600a0160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550837f7c2de587c00d75474a0c6c6fa96fd3b45dc974cd4e8a75f712bb84c950dce1b53385846040516117b993929190614145565b60405180910390a250505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60045481565b6000600860008381526020019081526020016000209050600554816005015461181c91906135a1565b421161185d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611854906141c8565b60405180910390fd5b8060060160009054906101000a900460ff16156118af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118a6906140b9565b60405180910390fd5b6000805b600c8054905081101561195d576000600c82815481106118d6576118d5613bab565b5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690508360080160008263ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff166119495761193b8186611dc7565b8361194691906135a1565b92505b50808061195590613784565b9150506118b3565b50803410156119a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199890613eba565b60405180910390fd5b505050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6119d4611c62565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611a465760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401611a3d9190612e93565b60405180910390fd5b611a4f81611ce9565b50565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606000611a8883600001611f80565b905060608190508092505050919050565b60008060008484810190611aad91906141e8565b9350935093505060006008600085815260200190815260200160002090508060080160008863ffffffff1663ffffffff16815260200190815260200160002060009054906101000a900460ff1615611b3a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b31906142c1565b60405180910390fd5b82816003016000828254611b4e91906135a1565b9250508190555081816004016000828254611b6991906135a1565b9250508190555060018160080160008963ffffffff1663ffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555080600901600081819054906101000a900463ffffffff1680929190611bce906142e1565b91906101000a81548163ffffffff021916908363ffffffff16021790555050837f3041511d11da95916f337299a30f01b387a2444bed3a0a00abffe20750146660888585604051611c219392919061430d565b60405180910390a2600c805490508160090160009054906101000a900463ffffffff1663ffffffff1603611c5957611c5884611fdc565b5b50505050505050565b611c6a612308565b73ffffffffffffffffffffffffffffffffffffffff16611c88610cca565b73ffffffffffffffffffffffffffffffffffffffff1614611ce757611cab612308565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611cde9190612e93565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000611dbf836000018360001b612310565b905092915050565b600080600183604051602001611dde92919061437f565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd1886600b60008963ffffffff1663ffffffff16815260200190815260200160002054856040518463ffffffff1660e01b8152600401611e6f9392919061341b565b602060405180830381865afa158015611e8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb0919061346e565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de018287600b60008a63ffffffff1663ffffffff16815260200190815260200160002054866040518563ffffffff1660e01b8152600401611f319392919061341b565b60206040518083038185885af1158015611f4f573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190611f74919061351c565b50809250505092915050565b606081600001805480602002602001604051908101604052809291908181526020018280548015611fd057602002820191906000526020600020905b815481526020019060010190808311611fbc575b50505050509050919050565b600060086000838152602001908152602001600020905060008160040154826003015461200991906135a1565b905060006064600654600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561207f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a3919061346e565b6120ad91906143a8565b6120b79190614419565b90508082101580156120d0575082600401548360030154115b156123025760018360060160006101000a81548160ff02191690831515021790555061210684600961238090919063ffffffff16565b50837f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f60405160405180910390a260008360060160019054906101000a900463ffffffff1663ffffffff16036122305760008360060160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16846007016040516121a491906144d8565b6000604051808303816000865af19150503d80600081146121e1576040519150601f19603f3d011682016040523d82523d6000602084013e6121e6565b606091505b505090508061222a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122219061453b565b60405180910390fd5b50612301565b6123008360060160019054906101000a900463ffffffff16858560060160059054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686600701805461227d90613147565b80601f01602080910402602001604051908101604052809291908181526020018280546122a990613147565b80156122f65780601f106122cb576101008083540402835291602001916122f6565b820191906000526020600020905b8154815290600101906020018083116122d957829003601f168201915b505050505061239a565b5b5b50505050565b600033905090565b600061231c8383612553565b61237557826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061237a565b600090505b92915050565b6000612392836000018360001b612576565b905092915050565b600060028484846040516020016123b49493929190614596565b60405160208183030381529060405290506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639c42bd1887600b60008a63ffffffff1663ffffffff16815260200190815260200160002054856040518463ffffffff1660e01b81526004016124459392919061341b565b602060405180830381865afa158015612462573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612486919061346e565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fa31de018288600b60008b63ffffffff1663ffffffff16815260200190815260200160002054866040518563ffffffff1660e01b81526004016125079392919061341b565b60206040518083038185885af1158015612525573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061254a919061351c565b50505050505050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461267e5760006001826125a89190613bda565b90506000600186600001805490506125c09190613bda565b905080821461262f5760008660000182815481106125e1576125e0613bab565b5b906000526020600020015490508087600001848154811061260557612604613bab565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480612643576126426145e2565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050612684565b60009150505b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6126b18161269e565b81146126bc57600080fd5b50565b6000813590506126ce816126a8565b92915050565b6000602082840312156126ea576126e9612694565b5b60006126f8848285016126bf565b91505092915050565b61270a8161269e565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061273b82612710565b9050919050565b61274b81612730565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561278b578082015181840152602081019050612770565b60008484015250505050565b6000601f19601f8301169050919050565b60006127b382612751565b6127bd818561275c565b93506127cd81856020860161276d565b6127d681612797565b840191505092915050565b60008115159050919050565b6127f6816127e1565b82525050565b600063ffffffff82169050919050565b612815816127fc565b82525050565b600081519050919050565b600082825260208201905092915050565b60006128428261281b565b61284c8185612826565b935061285c81856020860161276d565b61286581612797565b840191505092915050565b600061016082019050612886600083018e612701565b612893602083018d612742565b81810360408301526128a5818c6127a8565b90506128b4606083018b612701565b6128c1608083018a612701565b6128ce60a0830189612701565b6128db60c08301886127ed565b6128e860e083018761280c565b6128f6610100830186612742565b8181036101208301526129098185612837565b905061291961014083018461280c565b9c9b505050505050505050505050565b600060208201905061293e6000830184612701565b92915050565b61294d816127fc565b811461295857600080fd5b50565b60008135905061296a81612944565b92915050565b60006020828403121561298657612985612694565b5b60006129948482850161295b565b91505092915050565b6000819050919050565b6129b08161299d565b82525050565b60006020820190506129cb60008301846129a7565b92915050565b60006020820190506129e6600083018461280c565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b612a218161269e565b82525050565b6000612a338383612a18565b60208301905092915050565b6000602082019050919050565b6000612a57826129ec565b612a6181856129f7565b9350612a6c83612a08565b8060005b83811015612a9d578151612a848882612a27565b9750612a8f83612a3f565b925050600181019050612a70565b5085935050505092915050565b60006020820190508181036000830152612ac48184612a4c565b905092915050565b612ad58161299d565b8114612ae057600080fd5b50565b600081359050612af281612acc565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112612b1d57612b1c612af8565b5b8235905067ffffffffffffffff811115612b3a57612b39612afd565b5b602083019150836001820283011115612b5657612b55612b02565b5b9250929050565b60008060008060608587031215612b7757612b76612694565b5b6000612b858782880161295b565b9450506020612b9687828801612ae3565b935050604085013567ffffffffffffffff811115612bb757612bb6612699565b5b612bc387828801612b07565b925092505092959194509250565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b612c0e82612797565b810181811067ffffffffffffffff82111715612c2d57612c2c612bd6565b5b80604052505050565b6000612c4061268a565b9050612c4c8282612c05565b919050565b600067ffffffffffffffff821115612c6c57612c6b612bd6565b5b612c7582612797565b9050602081019050919050565b82818337600083830152505050565b6000612ca4612c9f84612c51565b612c36565b905082815260208101848484011115612cc057612cbf612bd1565b5b612ccb848285612c82565b509392505050565b600082601f830112612ce857612ce7612af8565b5b8135612cf8848260208601612c91565b91505092915050565b612d0a81612730565b8114612d1557600080fd5b50565b600081359050612d2781612d01565b92915050565b600067ffffffffffffffff821115612d4857612d47612bd6565b5b612d5182612797565b9050602081019050919050565b6000612d71612d6c84612d2d565b612c36565b905082815260208101848484011115612d8d57612d8c612bd1565b5b612d98848285612c82565b509392505050565b600082601f830112612db557612db4612af8565b5b8135612dc5848260208601612d5e565b91505092915050565b60008060008060008060c08789031215612deb57612dea612694565b5b6000612df989828a0161295b565b9650506020612e0a89828a016126bf565b955050604087013567ffffffffffffffff811115612e2b57612e2a612699565b5b612e3789828a01612cd3565b9450506060612e4889828a0161295b565b9350506080612e5989828a01612d18565b92505060a087013567ffffffffffffffff811115612e7a57612e79612699565b5b612e8689828a01612da0565b9150509295509295509295565b6000602082019050612ea86000830184612742565b92915050565b60008060008060808587031215612ec857612ec7612694565b5b600085013567ffffffffffffffff811115612ee657612ee5612699565b5b612ef287828801612cd3565b9450506020612f038782880161295b565b9350506040612f1487828801612d18565b925050606085013567ffffffffffffffff811115612f3557612f34612699565b5b612f4187828801612da0565b91505092959194509250565b60008060408385031215612f6457612f63612694565b5b6000612f728582860161295b565b9250506020612f8385828601612ae3565b9150509250929050565b612f96816127e1565b8114612fa157600080fd5b50565b600081359050612fb381612f8d565b92915050565b60008060408385031215612fd057612fcf612694565b5b6000612fde858286016126bf565b9250506020612fef85828601612fa4565b9150509250929050565b6000819050919050565b600061301e61301961301484612710565b612ff9565b612710565b9050919050565b600061303082613003565b9050919050565b600061304282613025565b9050919050565b61305281613037565b82525050565b600060208201905061306d6000830184613049565b92915050565b600061307e82613025565b9050919050565b61308e81613073565b82525050565b60006020820190506130a96000830184613085565b92915050565b6000602082840312156130c5576130c4612694565b5b60006130d384828501612d18565b91505092915050565b60006130e782613025565b9050919050565b6130f7816130dc565b82525050565b600060208201905061311260008301846130ee565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061315f57607f821691505b60208210810361317257613171613118565b5b50919050565b7f4f6e6c79204d61696c626f782063616e2063616c6c20746869732066756e637460008201527f696f6e0000000000000000000000000000000000000000000000000000000000602082015250565b60006131d460238361275c565b91506131df82613178565b604082019050919050565b60006020820190508181036000830152613203816131c7565b9050919050565b7f496e76616c69642073656e646572000000000000000000000000000000000000600082015250565b6000613240600e8361275c565b915061324b8261320a565b602082019050919050565b6000602082019050818103600083015261326f81613233565b9050919050565b6000806040838503121561328d5761328c612694565b5b600061329b858286016126bf565b925050602083013567ffffffffffffffff8111156132bc576132bb612699565b5b6132c885828601612da0565b9150509250929050565b7f4f6e6c792074686520636f6e74726163742063616e2063616c6c20746869732060008201527f66756e6374696f6e000000000000000000000000000000000000000000000000602082015250565b600061332e60288361275c565b9150613339826132d2565b604082019050919050565b6000602082019050818103600083015261335d81613321565b9050919050565b6000819050919050565b600060ff82169050919050565b600061339661339161338c84613364565b612ff9565b61336e565b9050919050565b6133a68161337b565b82525050565b600060c0820190506133c1600083018961339d565b6133ce6020830188612701565b81810360408301526133e081876127a8565b90506133ef606083018661280c565b6133fc6080830185612742565b81810360a083015261340e8184612837565b9050979650505050505050565b6000606082019050613430600083018661280c565b61343d60208301856129a7565b818103604083015261344f8184612837565b9050949350505050565b600081519050613468816126a8565b92915050565b60006020828403121561348457613483612694565b5b600061349284828501613459565b91505092915050565b7f496e73756666696369656e742066656520666f72206469737061746368000000600082015250565b60006134d1601d8361275c565b91506134dc8261349b565b602082019050919050565b60006020820190508181036000830152613500816134c4565b9050919050565b60008151905061351681612acc565b92915050565b60006020828403121561353257613531612694565b5b600061354084828501613507565b91505092915050565b600060408201905061355e600083018561280c565b61356b6020830184612701565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006135ac8261269e565b91506135b78361269e565b92508282019050808211156135cf576135ce613572565b5b92915050565b7f496e73756666696369656e742066656520666f72204947500000000000000000600082015250565b600061360b60188361275c565b9150613616826135d5565b602082019050919050565b6000602082019050818103600083015261363a816135fe565b9050919050565b600060808201905061365660008301876129a7565b613663602083018661280c565b6136706040830185612701565b61367d6060830184612742565b95945050505050565b7f4d75737420686f6c6420676f7665726e616e636520746f6b656e7320746f207060008201527f726f706f73650000000000000000000000000000000000000000000000000000602082015250565b60006136e260268361275c565b91506136ed82613686565b604082019050919050565b60006020820190508181036000830152613711816136d5565b9050919050565b7f496e76616c696420657865637574696f6e20636861696e000000000000000000600082015250565b600061374e60178361275c565b915061375982613718565b602082019050919050565b6000602082019050818103600083015261377d81613741565b9050919050565b600061378f8261269e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036137c1576137c0613572565b5b600182019050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261382e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826137f1565b61383886836137f1565b95508019841693508086168417925050509392505050565b600061386b6138666138618461269e565b612ff9565b61269e565b9050919050565b6000819050919050565b61388583613850565b61389961389182613872565b8484546137fe565b825550505050565b600090565b6138ae6138a1565b6138b981848461387c565b505050565b5b818110156138dd576138d26000826138a6565b6001810190506138bf565b5050565b601f821115613922576138f3816137cc565b6138fc846137e1565b8101602085101561390b578190505b61391f613917856137e1565b8301826138be565b50505b505050565b600082821c905092915050565b600061394560001984600802613927565b1980831691505092915050565b600061395e8383613934565b9150826002028217905092915050565b61397782612751565b67ffffffffffffffff8111156139905761398f612bd6565b5b61399a8254613147565b6139a58282856138e1565b600060209050601f8311600181146139d857600084156139c6578287015190505b6139d08582613952565b865550613a38565b601f1984166139e6866137cc565b60005b82811015613a0e578489015182556001820191506020850194506020810190506139e9565b86831015613a2b5784890151613a27601f891682613934565b8355505b6001600288020188555050505b505050505050565b60008190508160005260206000209050919050565b601f821115613a9657613a6781613a40565b613a70846137e1565b81016020851015613a7f578190505b613a93613a8b856137e1565b8301826138be565b50505b505050565b613aa48261281b565b67ffffffffffffffff811115613abd57613abc612bd6565b5b613ac78254613147565b613ad2828285613a55565b600060209050601f831160018114613b055760008415613af3578287015190505b613afd8582613952565b865550613b65565b601f198416613b1386613a40565b60005b82811015613b3b57848901518255600182019150602085019450602081019050613b16565b86831015613b585784890151613b54601f891682613934565b8355505b6001600288020188555050505b505050505050565b6000606082019050613b826000830186612742565b8181036020830152613b9481856127a8565b9050613ba3604083018461280c565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000613be58261269e565b9150613bf08361269e565b9250828203905081811115613c0857613c07613572565b5b92915050565b600060c082019050613c23600083018961280c565b613c306020830188612701565b8181036040830152613c4281876127a8565b9050613c51606083018661280c565b613c5e6080830185612742565b81810360a0830152613c708184612837565b9050979650505050505050565b60008160e01c9050919050565b600060033d1115613ca95760046000803e613ca6600051613c7d565b90505b90565b600060443d10613d3957613cbe61268a565b60043d036004823e80513d602482011167ffffffffffffffff82111715613ce6575050613d39565b808201805167ffffffffffffffff811115613d045750505050613d39565b80602083010160043d038501811115613d21575050505050613d39565b613d3082602001850186612c05565b82955050505050505b90565b6000606082019050613d51600083018661280c565b613d5e6020830185612701565b8181036040830152613d7081846127a8565b9050949350505050565b7f556e6b6e6f776e206572726f7200000000000000000000000000000000000000600082015250565b6000613db0600d8361275c565b9150613dbb82613d7a565b602082019050919050565b6000606082019050613ddb600083018561280c565b613de86020830184612701565b8181036040830152613df981613da3565b90509392505050565b7f4661696c656420746f20646973706174636820746f20616e7920636861696e00600082015250565b6000613e38601f8361275c565b9150613e4382613e02565b602082019050919050565b60006020820190508181036000830152613e6781613e2b565b9050919050565b7f496e73756666696369656e74206665652070726f766964656400000000000000600082015250565b6000613ea460198361275c565b9150613eaf82613e6e565b602082019050919050565b60006020820190508181036000830152613ed381613e97565b9050919050565b7f436861696e20616c726561647920737570706f72746564000000000000000000600082015250565b6000613f1060178361275c565b9150613f1b82613eda565b602082019050919050565b60006020820190508181036000830152613f3f81613f03565b9050919050565b6000604082019050613f5b600083018561280c565b613f6860208301846129a7565b9392505050565b7f4d75737420686f6c6420676f7665726e616e636520746f6b656e7320746f207660008201527f6f74650000000000000000000000000000000000000000000000000000000000602082015250565b6000613fcb60238361275c565b9150613fd682613f6f565b604082019050919050565b60006020820190508181036000830152613ffa81613fbe565b9050919050565b7f566f74696e6720706572696f642068617320656e646564000000000000000000600082015250565b600061403760178361275c565b915061404282614001565b602082019050919050565b600060208201905081810360008301526140668161402a565b9050919050565b7f50726f706f73616c20616c726561647920657865637574656400000000000000600082015250565b60006140a360198361275c565b91506140ae8261406d565b602082019050919050565b600060208201905081810360008301526140d281614096565b9050919050565b7f416c726561647920766f74656400000000000000000000000000000000000000600082015250565b600061410f600d8361275c565b915061411a826140d9565b602082019050919050565b6000602082019050818103600083015261413e81614102565b9050919050565b600060608201905061415a6000830186612742565b61416760208301856127ed565b6141746040830184612701565b949350505050565b7f566f74696e6720706572696f64206e6f7420656e646564000000000000000000600082015250565b60006141b260178361275c565b91506141bd8261417c565b602082019050919050565b600060208201905081810360008301526141e1816141a5565b9050919050565b6000806000806080858703121561420257614201612694565b5b6000614210878288016126bf565b9450506020614221878288016126bf565b9350506040614232878288016126bf565b9250506060614243878288016126bf565b91505092959194509250565b7f566f74657320616c726561647920636f6c6c656374656420666f72207468697360008201527f20636861696e0000000000000000000000000000000000000000000000000000602082015250565b60006142ab60268361275c565b91506142b68261424f565b604082019050919050565b600060208201905081810360008301526142da8161429e565b9050919050565b60006142ec826127fc565b915063ffffffff820361430257614301613572565b5b600182019050919050565b6000606082019050614322600083018661280c565b61432f6020830185612701565b61433c6040830184612701565b949350505050565b6000819050919050565b600061436961436461435f84614344565b612ff9565b61336e565b9050919050565b6143798161434e565b82525050565b60006040820190506143946000830185614370565b6143a16020830184612701565b9392505050565b60006143b38261269e565b91506143be8361269e565b92508282026143cc8161269e565b915082820484148315176143e3576143e2613572565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006144248261269e565b915061442f8361269e565b92508261443f5761443e6143ea565b5b828204905092915050565b600081905092915050565b6000815461446281613147565b61446c818661444a565b94506001821660008114614487576001811461449c576144cf565b60ff19831686528115158202860193506144cf565b6144a585613a40565b60005b838110156144c7578154818901526001820191506020810190506144a8565b838801955050505b50505092915050565b60006144e48284614455565b915081905092915050565b7f50726f706f73616c20657865637574696f6e206661696c656400000000000000600082015250565b600061452560198361275c565b9150614530826144ef565b602082019050919050565b6000602082019050818103600083015261455481614518565b9050919050565b6000819050919050565b600061458061457b6145768461455b565b612ff9565b61336e565b9050919050565b61459081614565565b82525050565b60006080820190506145ab6000830187614587565b6145b86020830186612701565b6145c56040830185612742565b81810360608301526145d78184612837565b905095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea2646970667358221220d8049513d7d22e1fdcfc91717f9fa3a45c13b21632451e70a0495c34c9bcf54464736f6c63430008140033",
  "devdoc": {
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 942,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "governanceToken",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 945,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "mailbox",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IMailbox)933"
      },
      {
        "astId": 948,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "igp",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IInterchainGasPaymaster)894"
      },
      {
        "astId": 950,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "proposalCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 953,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "votingPeriod",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 956,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "quorumPercentage",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 958,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "currentChainID",
        "offset": 0,
        "slot": "7",
        "type": "t_uint32"
      },
      {
        "astId": 994,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "proposals",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(Proposal)989_storage)"
      },
      {
        "astId": 997,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "activeProposals",
        "offset": 0,
        "slot": "9",
        "type": "t_struct(UintSet)738_storage"
      },
      {
        "astId": 1001,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "chainToProxyAddress",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint32,t_bytes32)"
      },
      {
        "astId": 1004,
        "contract": "contracts/GovernanceCore.sol:GovernanceCore",
        "label": "supportedChains",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_uint32)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInterchainGasPaymaster)894": {
        "encoding": "inplace",
        "label": "contract IInterchainGasPaymaster",
        "numberOfBytes": "20"
      },
      "t_contract(IMailbox)933": {
        "encoding": "inplace",
        "label": "contract IMailbox",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(Proposal)989_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GovernanceCore.Proposal)",
        "numberOfBytes": "32",
        "value": "t_struct(Proposal)989_storage"
      },
      "t_mapping(t_uint32,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Proposal)989_storage": {
        "encoding": "inplace",
        "label": "struct GovernanceCore.Proposal",
        "members": [
          {
            "astId": 960,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 962,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "proposer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 964,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "description",
            "offset": 0,
            "slot": "2",
            "type": "t_string_storage"
          },
          {
            "astId": 966,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "forVotes",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 968,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "againstVotes",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 970,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "startTime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 972,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "executed",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 974,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "executionChain",
            "offset": 1,
            "slot": "6",
            "type": "t_uint32"
          },
          {
            "astId": 976,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "target",
            "offset": 5,
            "slot": "6",
            "type": "t_address"
          },
          {
            "astId": 978,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "callData",
            "offset": 0,
            "slot": "7",
            "type": "t_bytes_storage"
          },
          {
            "astId": 982,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "chainVotesCollected",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint32,t_bool)"
          },
          {
            "astId": 984,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "chainVotesCount",
            "offset": 0,
            "slot": "9",
            "type": "t_uint32"
          },
          {
            "astId": 988,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "hasVoted",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(Set)266_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 261,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 265,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)738_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 737,
            "contract": "contracts/GovernanceCore.sol:GovernanceCore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)266_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}